// ----- CONFIGURACIÓN FIREBASE -----
// 1) Ve a tu Firebase Console -> Project settings -> Your apps -> copia firebaseConfig
const firebaseConfig = {
  apiKey: "TU_API_KEY",
  authDomain: "TU_AUTH_DOMAIN",
  projectId: "TU_PROJECT_ID",
  storageBucket: "TU_STORAGE_BUCKET",
  messagingSenderId: "TU_MSG_SENDER_ID",
  appId: "TU_APP_ID"
};

// Inicializar Firebase (compat mode)
firebase.initializeApp(firebaseConfig);
const db = firebase.firestore();

// ----- LISTA INICIAL DE NÚMEROS (los que me diste) -----
const numerosIniciales = [
  079, 080, 088, 092, 108, 109, 126, 181, 182, 183, 185, 193, 194,
  243, 244, 245, 250, 268, 335, 337, 452, 453, 460, 471, 530, 531,
  534, 542, 554, 555, 607, 608, 609, 615, 618, 622, 627, 723, 724,
  725, 731, 746, 747, 749, 841, 842, 853, 905, 906, 921
];

const lista = document.getElementById("lista-numeros");

// Crea/actualiza la colección "numeros" en Firestore la primera vez (opcional).
// Esto asegura que exista un documento por número con estado "disponible" si no existe.
async function inicializarNumeros() {
  const batch = db.batch();
  for (const n of numerosIniciales) {
    const docRef = db.collection("numeros").doc(String(n));
    const docSnap = await docRef.get();
    if (!docSnap.exists) {
      batch.set(docRef, { estado: "disponible", creadoEn: firebase.firestore.FieldValue.serverTimestamp() });
    }
  }
  // Ejecuta el batch solo si hay operaciones (puede ser vacío)
  try {
    await batch.commit();
  } catch (err) {
    console.warn("Batch init error (puede ser ignorable):", err);
  }
}

// Muestra los números disponibles y observa cambios en tiempo real
function renderizarNumeros(numerosDisponibles) {
  lista.innerHTML = "";
  numerosDisponibles.forEach(num => {
    const div = document.createElement("div");
    div.classList.add("numero");
    div.textContent = String(num).padStart(3, "0");
    div.dataset.numero = num;

    // click para autocompletar el input de número
    div.addEventListener("click", () => {
      const inputNumero = document.querySelector("input[name='numero']");
      if (inputNumero) inputNumero.value = num;
    });

    lista.appendChild(div);
  });
}

// Obtiene los números que están disponibles según Firestore
async function obtenerNumerosDisponibles() {
  const snapshot = await db.collection("numeros").where("estado", "==", "disponible").get();
  const disponibles = snapshot.docs.map(d => Number(d.id)).sort((a,b) => a-b);
  return disponibles;
}

// Observador en tiempo real para cambios en 'numeros' (opcional pero útil)
function observarCambiosNumeros(onUpdate) {
  return db.collection("numeros").onSnapshot(snapshot => {
    const disponibles = [];
    snapshot.forEach(doc => {
      const idNum = Number(doc.id);
      const data = doc.data();
      if (data.estado === "disponible") disponibles.push(idNum);
    });
    onUpdate(disponibles.sort((a,b)=>a-b));
  });
}

// Reserva: escribe en 'reservas' y marca el número como vendido
async function reservarNumero(formDataObj) {
  const numero = String(formDataObj.numero).trim();
  const numeroDoc = db.collection("numeros").doc(numero);

  // Transacción para evitar doble venta
  try {
    await db.runTransaction(async (tx) => {
      const doc = await tx.get(numeroDoc);
      if (!doc.exists) {
        throw new Error("Número inválido o no existe.");
      }
      const estado = doc.data().estado;
      if (estado !== "disponible") {
        throw new Error("Número ya fue reservado por otra persona.");
      }

      // Crear reserva
      const reservaRef = db.collection("reservas").doc();
      tx.set(reservaRef, {
        nombre: formDataObj.nombre,
        direccion: formDataObj.direccion,
        telefono: formDataObj.telefono,
        email: formDataObj.email,
        numero: numero,
        pago: formDataObj.pago,
        creadoEn: firebase.firestore.FieldValue.serverTimestamp()
      });

      // Marcar número como vendido
      tx.update(numeroDoc, { estado: "vendido", vendidoEn: firebase.firestore.FieldValue.serverTimestamp() });
    });
    return { ok: true };
  } catch (error) {
    return { ok: false, error: error.message || error };
  }
}

// Inicializar UI y formularios
document.addEventListener("DOMContentLoaded", async () => {
  // Inicializa docs de números (crea los que faltan)
  await inicializarNumeros();

  // Primer render: obtener disponibles y mostrar
  const disponibles = await obtenerNumerosDisponibles();
  renderizarNumeros(disponibles);

  // Observador en tiempo real (actualiza UI cuando otro usuario reserva)
  observarCambiosNumeros(renderizarNumeros);

  // Manejo del formulario
  const form = document.querySelector("form");
  const mensaje = document.getElementById("mensaje");

  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    mensaje.textContent = "Procesando reserva…";

    const fd = new FormData(form);
    const formObj = Object.fromEntries(fd.entries());

    // 1) Intentar reservar en Firestore (transacción)
    const res = await reservarNumero(formObj);
    if (!res.ok) {
      mensaje.textContent = "❌ " + res.error;
      return;
    }

    // 2) Enviar también a Formspree para que te llegue el correo (no dependemos solo de Firestore)
    try {
      const response = await fetch("https://formspree.io/f/mnqevrjy", {
        method: "POST",
        body: fd,
        headers: { 'Accept': 'application/json' }
      });
      if (!response.ok) {
        // aunque el email falle, la reserva ya está en Firestore; avisar para revisar manualmente
        mensaje.textContent = "✅ Reserva guardada, pero hubo un problema enviando el email. Verifica en el panel.";
        form.reset();
        return;
      }
    } catch (err) {
      mensaje.textContent = "✅ Reserva guardada. Error al enviar email (revisar conexión).";
      form.reset();
      return;
    }

    mensaje.textContent = "✅ Reserva completada. Revisa tu correo para confirmar.";
    form.reset();
  });
});
